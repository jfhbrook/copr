#!/usr/bin/env bash

set -euo pipefail

# Download the thing if it's a URL, bundle and create the source tarball, and
# print the filename

downloaddir="${downloaddir:?}"
sourcedir="${sourcedir:?}"

function ensure-dirs {
  local dir_name

  dir_name="${1:?}"

  mkdir -p "${dir_name}"
  mkdir -p "${sourcedir}"
}

function get-tarname {
  # For sources which are already tarballs, keep the extension the same. But
  # for everything else, add the extension for the tarball it contains.

  local basename
  local tarname

  basename="${1:?}"

  if [[ ${basename} =~ \.tar\.gz$ ]]; then
    tarname="${basename}"
  else
    tarname="${basename}.tar.gz"
  fi

  echo "${tarname}"
}

function stage-file {
  #
  # Stage the file at the URL. Accepts local file paths.
  #

  local filename
  local url

  filename="${1:?}"
  url="${2:?}"

  if [ ! -f "${filename}" ]; then
    if [[ "${url}" =~ (https?|ftp|file):// ]]; then
      # Download the source
      curl -L "${url}" -o "${url}" 1>&2
    else
      cp "${url}" "${filename}"
    fi
  fi
}

function create-tar {
  local index

  index="${1-?}"
  tarfile="${2-?}"

  # This is the format they want!
  (cd "${downloaddir}/${index}" && tar -czf "${tarfile}" .)
}

function main {
  local name
  local version
  local index
  local url
  local base_name
  local dir_name
  local filename
  local tar_name
  local tar_file

  name="${1:?}"
  version="${2:?}"
  index="${3:?}"
  url="${4:?}"

  base_name="$(basename "${url}")"
  dir_name="${downloaddir}/${index}/${name}-${version}"
  filename="${dir_name}/${base_name}"
  tar_name="$(get-tarname "${base_name}")"
  tar_file="${sourcedir}/${tar_name}"

  ensure-dirs "${dir_name}"
  download-file "${filename}" "${url}"
  create-tar "${index}" "${tar_file}"

  echo "${tar_name}"
}

main "$@"